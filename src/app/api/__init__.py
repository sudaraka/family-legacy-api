""" API Blueprint """

from flask import Blueprint, jsonify, g, current_app

from flask.ext.httpauth import HTTPBasicAuth

from ..decorators import etag, no_cache
from ..models import APITokenModel


api = Blueprint('api', __name__)
token_auth = HTTPBasicAuth()


@api.after_request
@etag
def after_request(response):
    """
    Apply ETag and CORS headers to all HTTP responses generated by this
    blueprint
    """

    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = \
        'OPTIONS, HEAD, GET, PUT, POST, DELETE'
    response.headers['Access-Control-Allow-Headers'] = \
        'authorization, content-type'

    return response


@token_auth.error_handler
@no_cache
def unauthorized():  # pragma: no cover
    """ Handle authentication errors """

    response = jsonify({
        'status': 401,
        'error': 'unauthorized',
        'message': 'Access token is invalid or expired'
    })

    response.status_code = 401

    return response


@token_auth.verify_password
def verify_token(*token):  # pragma: no cover
    """ Verify token received via HTTP Basic Auth """

    if current_app.config.get('IGNORE_AUTH') is True:
        return True

    g.user = APITokenModel.verify_token(token[0])

    if g.user is None:
        return False

    return g.user


from . import errors, persons, legacy
